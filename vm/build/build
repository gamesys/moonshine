#!/usr/bin/env node
/*
 * Moonshine - a Lua virtual machine.
 *
 * Email: moonshine@gamesys.co.uk
 * http://moonshinejs.org
 *
 * Copyright (c) 2013-2015 Gamesys Limited. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * @fileOverview Moonshine build script.
 * Concatenates source files into a single JS library file and produces a minimised version.
 * Use -swc switch to produce a Flash libaray file too.
 *
 * Note: Requires Google Closure Compiler to be installed in /usr/local/bin
 *       https://developers.google.com/closure/compiler/
 *
 * Examples:
 * 	./build				Builds JavaScript lib files.
 * 	./build -swc 		Builds JavaScript and ActionScript lib files.
 *
 * @author <a href="mailto:paul.cuthbertson@gamesys.co.uk">Paul Cuthbertson</a>
 */



var switches = getSwitches(process.argv),
	exec = require('child_process').exec,
	fs = require('fs'),


	SOURCE_FILENAMES = [
		'../src/init.js',
		'../src/gc.js',
		'../src/EventEmitter.js',
		'../src/FileManager.js',
		'../src/VM.js',
		'../src/Register.js',
		'../src/Closure.js',
		'../src/Function.js',
		'../src/Coroutine.js',
		'../src/Table.js',
		'../src/Error.js',
		'../src/File.js',
		'../src/operations.js',
		'../src/jit.js',
		'../src/lib.js',
		'../src/utils.js',
		'../src/output.js'
	],
	OUTPUT_FILENAME = '../moonshine.js',
	HEADER_FILENAME = './header.js',
	FOOTER_FILENAME = './footer.js',
	MODULE_FILENAME = '../moonshine-module.js',
	MINIFIED_OUTPUT_FILENAME = '../moonshine.min.js',
	AS_HEADER_FILENAME = '../src/as/header.as',
	AS_FOOTER_FILENAME = '../src/as/footer.as',
	AS_CLASS_NAME = 'Moonshine',
	SWC_OUTPUT_FILENAME = '../moonshine.swc';


buildLibrary();
minifyLibrary();
if (switches['-swc']) buildSWC();




/**
 * Builds an array of switches from command line arguments.
 * @param {Array} args Command line arguments.
 * @returns {Object} Object containing a key for each switch found.
 */
function getSwitches (args) {
	var arg, i, l,
		result = [];

	for (i = 2, l = args.length; i < l; i++) {
		arg = args[i];
		if (arg.substr(0, 1) == '-') result[arg] = true;
	}

	return result;
}




/**
 * Appends the content of a file to the end of a write buffer.
 * @param {Object} fd Output file pointer.
 * @param {String} filename Input filename.
 * @param {Boolean} intact Flag for instructing method to not alter the input.
 */
function appendFile (fd, filename, intact) {
	var input = fs.readFileSync(filename).toString(),
		desc = filename.replace('..', 'vm');

	if (!intact) {
		// Remove license text as we don't need them repeated in concatenated file.
		input = input.replace(/\/\*[\s\*]+Moonshine - a Lua virtual machine(.*\n)*?\s*\*\//g, '');

		// Remove @fileOverviews that don't apply in concatenated file.
		input = input.replace(/\/\*\*[\s\*]+\@fileOverview(.*\n)*?\s*\*\//g, '\n\n// ' + desc + ':\n');
	}

	fs.writeSync(fd, input);
}




/**
 * Concatenates source files.
 */
function buildLibrary () {
	var output = fs.openSync(OUTPUT_FILENAME, 'w'),
		input,
		i, l;

	appendFile(output, HEADER_FILENAME, true);
	for (i = 0, l = SOURCE_FILENAMES.length; i < l; i++) appendFile(output, SOURCE_FILENAMES[i]);
	appendFile(output, FOOTER_FILENAME, true);

	fs.closeSync(output);
	console.log ('File written: ' + OUTPUT_FILENAME);
}




/**
 * Minifies an already-built library file.
 */
function minifyLibrary () {
	var filename = './minified.js',
		cmd = 'java -jar /usr/local/bin/yuicompressor-2.4.7.jar ' + OUTPUT_FILENAME + ' -o ' + filename;
		// cmd = 'java -jar /usr/local/bin/compiler.jar --js ' + OUTPUT_FILENAME + ' --js_output_file ' + filename;

	exec(cmd, function (err) {
		if (err) throw err;

		var output = fs.openSync(MINIFIED_OUTPUT_FILENAME, 'w');
		appendFile(output, HEADER_FILENAME, true);
		appendFile(output, filename);

		fs.closeSync(output);
		fs.unlinkSync(filename);

		console.log('File written: ' + MINIFIED_OUTPUT_FILENAME);
		if (switches['-module']) buildModule();
	});
}




/**
 * Build a Flash SWC.
 */
function buildSWC () {
	var filename = './' + AS_CLASS_NAME + '.as',
		output = fs.openSync(filename, 'w'),
		cmd = 'compc -include-classes=' + AS_CLASS_NAME + ' -output=' + SWC_OUTPUT_FILENAME + ' -source-path=. -warnings=false';

	appendFile(output, AS_HEADER_FILENAME);
	appendFile(output, OUTPUT_FILENAME);
	appendFile(output, AS_FOOTER_FILENAME);
	fs.closeSync(output);

	exec(cmd, function (err) {
		if (err) throw err;
		fs.unlinkSync(filename);

		console.log('File written: ' + SWC_OUTPUT_FILENAME);
	});
}




/**
 * Builds a RequireJS module.
 * Note: This in no way condones the use of RequireJS.
 */
function buildModule () {
	var output = fs.openSync(MODULE_FILENAME, 'w');

	appendFile(output, HEADER_FILENAME, true);
	fs.writeSync(output, 'define(function(require,exports,module){\n');
	appendFile(output, MINIFIED_OUTPUT_FILENAME);
	fs.writeSync(output, '\n});');

	fs.closeSync(output);
	console.log('File written: ' + MODULE_FILENAME);
}
